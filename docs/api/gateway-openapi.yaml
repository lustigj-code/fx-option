openapi: 3.1.0
info:
  title: FX Option Gateway API
  version: 1.0.0
  description: |
    REST API that powers the FX Option gateway. The gateway orchestrates requests between
    the public web portal, the internal admin console, and downstream pricing/booking
    services.
servers:
  - url: http://localhost:4000
    description: Local development gateway
  - url: https://api.fx-option.dev
    description: Shared staging gateway
paths:
  /health:
    get:
      summary: Gateway health check
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
  /v1/quotes:
    get:
      summary: Retrieve latest quote snapshot
      operationId: listQuotes
      parameters:
        - in: query
          name: currencyPair
          schema:
            type: string
            example: EURUSD
          description: Restrict results to a single currency pair (e.g. EURUSD)
        - in: query
          name: tenor
          schema:
            type: string
            example: 1M
          description: Optional tenor filter (e.g. 1M, 3M)
      responses:
        '200':
          description: Collection of quotes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quote'
    post:
      summary: Request an executable quote
      operationId: requestQuote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequest'
      responses:
        '201':
          description: Executable quote created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        '422':
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/trades:
    post:
      summary: Book an option trade
      operationId: bookTrade
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TradeRequest'
      responses:
        '201':
          description: Trade created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trade'
        '409':
          description: Quote has expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/trades/{tradeId}:
    get:
      summary: Retrieve a trade by identifier
      operationId: getTrade
      parameters:
        - in: path
          name: tradeId
          required: true
          schema:
            type: string
          description: Identifier returned by the bookTrade endpoint
      responses:
        '200':
          description: Trade found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trade'
        '404':
          description: Trade not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/rates:
    get:
      summary: Retrieve market data used for pricing
      operationId: listRates
      responses:
        '200':
          description: Market data snapshot
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rate'
components:
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: ok
        time:
          type: string
          format: date-time
    QuoteRequest:
      type: object
      required:
        - currencyPair
        - side
        - notional
        - tenor
      properties:
        currencyPair:
          type: string
          example: EURUSD
        side:
          type: string
          enum: [BUY, SELL]
        notional:
          type: number
          format: double
          example: 1000000
        tenor:
          type: string
          example: 3M
        optionType:
          type: string
          enum: [CALL, PUT]
        strike:
          type: number
          format: double
          example: 1.0925
    Quote:
      type: object
      required:
        - id
        - expiresAt
        - premium
        - currencyPair
        - tenor
      properties:
        id:
          type: string
          example: q-01H8G7SV3C4YZ9
        currencyPair:
          type: string
        tenor:
          type: string
        premium:
          type: number
          format: double
        premiumCurrency:
          type: string
          example: USD
        expiresAt:
          type: string
          format: date-time
        spot:
          type: number
          format: double
        strike:
          type: number
          format: double
    TradeRequest:
      type: object
      required:
        - quoteId
        - book
      properties:
        quoteId:
          type: string
        book:
          type: string
          example: LDN_EQD
        counterpartyReference:
          type: string
        notes:
          type: string
    Trade:
      type: object
      required:
        - id
        - quoteId
        - bookedAt
        - status
      properties:
        id:
          type: string
          example: t-01H8G7WABCXYZ
        quoteId:
          type: string
        status:
          type: string
          enum: [PENDING, BOOKED, REJECTED]
        bookedAt:
          type: string
          format: date-time
        settlementDate:
          type: string
          format: date
        trader:
          type: string
          example: jdoe
    Rate:
      type: object
      required:
        - currencyPair
        - tenor
        - forward
      properties:
        currencyPair:
          type: string
        tenor:
          type: string
        forward:
          type: number
          format: double
        vol:
          type: number
          format: double
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Quote has expired
        code:
          type: string
          example: QUOTE_EXPIRED
